# -*- coding: utf-8 -*-
"""CSE258-HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AAY5zj5LqN-hmy1K9S2oPw2cn8c1ewM4
"""

from urllib.request import urlopen
import json
from matplotlib import pyplot as plt
from collections import defaultdict
from sklearn import linear_model as lm
import numpy as np
import random
import gzip
import math
# !pip install urllib
# from urllib import urlopen

def assertFloat(x):
    assert type(float(x)) == float

def assertFloatList(items, N):
    assert len(items) == N
    assert [type(float(x)) for x in items] == [float]*N

answers = {} # Your answers

"""#Q1)

## Importing data
"""

f = open("5year.arff", 'r')
# Read and parse the data
while not '@data' in f.readline():
    pass

dataset = []
for l in f:
    if '?' in l: # Missing entry
        continue
    l = l.split(',')
    values = [1] + [float(x) for x in l]
    values[-1] = values[-1] > 0 # Convert to bool
    dataset.append(values)

X = [d[:-1] for d in dataset]
y = [d[-1] for d in dataset]

print(X[0])

print(y[0])

model = lm.LogisticRegression(C=1.0)
model.fit(X,y)

y_pred = model.predict(X)

model.predict(np.array(X[0]).reshape(-1,65))

sumi = 0
for i in range(len(y)):
  sumi+= (y_pred[i]==y[i])
acc = sumi/len(y)
print("acc =", acc)

Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y)):
  if y[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)

BER = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))

print("BER = ",BER)

answers = {} # Your answers
answers['Q1'] = [acc,BER] # Accuracy and balanced error rate
assertFloatList(answers['Q1'], 2)

"""# Q2)"""

model = lm.LogisticRegression(C=1.0,class_weight='balanced')
model.fit(X,y)
y_pred = model.predict(X)
model.predict(np.array(X[0]).reshape(-1,65))
sumi = 0
for i in range(len(y)):
  sumi+= (y_pred[i]==y[i])
acc = sumi/len(y)
print("acc =", acc)
Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y)):
  if y[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)
BER = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
print("BER = ",BER)
answers['Q2'] = [acc,BER] # Accuracy and balanced error rate
assertFloatList(answers['Q2'], 2)

print(answers)

"""# Q3)"""

random.seed(3)
random.shuffle(dataset)
X = [d[:-1] for d in dataset]
y = [d[-1] for d in dataset]

X_train = X[:len(X)//2]
tmp = X[len(X)//2:]
X_vali = tmp[:len(tmp)//2]
X_test = tmp[len(tmp)//2:]

y_train = y[:len(y)//2]
tmp = y[len(y)//2:]
y_vali = tmp[:len(tmp)//2]
y_test = tmp[len(tmp)//2:]

print(X_train,X_vali,X_test,y_train,y_vali,y_test,sep="\n")

"""## BER train"""

model = lm.LogisticRegression(C=1.0,class_weight='balanced')
model.fit(X_train,y_train)
y_pred = model.predict(X_train)
model.predict(np.array(X[0]).reshape(-1,65))
sumi = 0
for i in range(len(y_train)):
  sumi+= (y_pred[i]==y_train[i])
acc_train = sumi/len(y_train)
print("acc =", acc_train)
Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y_train)):
  if y_train[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y_train[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y_train[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)
BER_train = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
print("BER = ",BER_train)

"""## BER Vali"""

model = lm.LogisticRegression(C=1.0,class_weight='balanced')
model.fit(X_vali,y_vali)
y_pred = model.predict(X_vali)
model.predict(np.array(X[0]).reshape(-1,65))
sumi = 0
for i in range(len(y_vali)):
  sumi+= (y_pred[i]==y_vali[i])
acc_vali = sumi/len(y_vali)
print("acc =", acc_train)
Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y_vali)):
  if y_vali[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y_vali[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y_vali[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)
BER_vali = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
print("BER = ",BER_vali)

"""## Test BER"""

model = lm.LogisticRegression(C=1.0,class_weight='balanced')
model.fit(X_test,y_test)
y_pred = model.predict(X_test)
model.predict(np.array(X[0]).reshape(-1,65))
sumi = 0
for i in range(len(y_test)):
  sumi+= (y_pred[i]==y_test[i])
acc_test = sumi/len(y_test)
print("acc =", acc_train)
Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y_test)):
  if y_test[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y_test[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y_test[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)
BER_test = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
print("BER = ",BER_test)

answers['Q3'] = [BER_train, BER_vali, BER_test]
assertFloatList(answers['Q3'], 3)

print(answers)

"""# Q4)"""

BERnormLis = []
for i in range(-4,5):
  model = lm.LogisticRegression(C=10**i,class_weight='balanced')
  model.fit(X_vali,y_vali)
  y_pred = model.predict(X_vali)
  model.predict(np.array(X[0]).reshape(-1,65))
  sumi = 0
  for i in range(len(y_vali)):
    sumi+= (y_pred[i]==y_vali[i])
  acc_vali = sumi/len(y_vali)
  print("acc =", acc_train)
  Tp,Tn,Fp,Fn = 0,0,0,0
  for i in range(len(y_vali)):
    if y_vali[i] == y_pred[i] == 1: # female
      Tp+=1
    elif y_vali[i] == 1 and y_pred[i] == 0:
      Fn+=1
    elif y_vali[i] == y_pred[i] == 0: # male
      Tn+=1
    else:
      Fp+=1

  print(Tp,Tn,Fp,Fn)
  BER_vali = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
  print("BER = ",BER_vali)
  BERnormLis.append(BER_vali)

print(BERnormLis)

answers['Q4'] = BERnormLis
assertFloatList(answers['Q4'], 9)

print(answers)

"""# Q5)"""

i = (BERnormLis.index(min(BERnormLis)))
i-=4
print("C = 10^",i)
c=10**(i)

model = lm.LogisticRegression(C=c,class_weight="balanced")
model.fit(X_test,y_test)
y_pred = model.predict(X_test)
model.predict(np.array(X[0]).reshape(-1,65))
sumi = 0
for i in range(len(y_test)):
  sumi+= (y_pred[i]==y_test[i])
acc_test = sumi/len(y_test)
print("acc =", acc_train)
Tp,Tn,Fp,Fn = 0,0,0,0
for i in range(len(y_test)):
  if y_test[i] == y_pred[i] == 1: # female
    Tp+=1
  elif y_test[i] == 1 and y_pred[i] == 0:
    Fn+=1
  elif y_test[i] == y_pred[i] == 0: # male
    Tn+=1
  else:
    Fp+=1

print(Tp,Tn,Fp,Fn)
BER_test = 1 - 0.5 * (Tp / (Tp + Fn) + Tn / (Tn + Fp))
print("BER = ",BER_test)

answers['Q5'] = [c,BER_test]
assertFloatList(answers['Q5'], 2)

print(answers["Q5"])

"""# Q6"""

f = gzip.open("young_adult_10000.json.gz")
dataset = []
for l in f:
    dataset.append(eval(l))
dataTrain = dataset[:9000]
dataTest = dataset[9000:]

# Some data structures you might want

usersPerItem = defaultdict(set) # Maps an item to the users who rated it
itemsPerUser = defaultdict(set) # Maps a user to the items that they rated
reviewsPerUser = defaultdict(list)
reviewsPerItem = defaultdict(list)
ratingDict = {} # To retrieve a rating for a specific user/item pair

def Jaccard(s1, s2):
    try:
      return len(s1.intersection(s2))/len(s1.union(s2))
    except:
      return 0

# def mostSimilar(i, N):

#   if sum(similarity) == 0:
#       if item in training:

#             return the usual thing

#       else: 

#             return numerator/denominator

#   else:
#         globalavg

for i in dataTrain:
  if i['user_id'] not in itemsPerUser:
    itemsPerUser[i['user_id']] = [i['book_id']]
  else:
    itemsPerUser[i['user_id']].append(i['book_id'])
  
  if i['book_id'] not in usersPerItem:
    usersPerItem[i['book_id']] = [i['user_id']]
  else:
    usersPerItem[i['book_id']].append(i['user_id'])

  if i['user_id'] not in reviewsPerUser:
    reviewsPerUser[i['user_id']] = [i['rating']]
  else:
    reviewsPerUser[i['user_id']].append(i['rating'])
  
  if i['book_id'] not in reviewsPerItem:
    reviewsPerItem[i['book_id']] = [i['rating']]
  else:
    reviewsPerItem[i['book_id']].append(i['rating'])

  ratingDict[(i["user_id"],i["book_id"])] = i['rating']

  # print(itemsPerUser)

import operator
Q6dict = {}
A = set(usersPerItem["2767052"])
for keys in usersPerItem:
  if keys == "2767052":
    continue
  B = set(usersPerItem[keys])
  # print(A,B)
  Q6dict[keys]=Jaccard(A,B)
  # print(Q6dict[keys],Jaccard(A,B))
  # break
ans = (sorted(Q6dict.items(),key= operator.itemgetter(1),reverse=True))
tmp = []
for i in ans:
  tmp.append((i[1],i[0]))

answers["Q6"] = tmp[:10]
print(answers["Q6"])

print(answers)

"""# Q7)"""

globalAvg = sum(ratingDict.values())/len(ratingDict)

def mostSimi(user,N):
  import operator
  Q6dict = {}
  A = set(usersPerItem[user])
  for keys in usersPerItem:
    if keys == user:
      continue
    B = set(usersPerItem[keys])
    # print(A,B)
    Q6dict[keys]=Jaccard(A,B)
    # print(Q6dict[keys],Jaccard(A,B))
    # break
  ans = (sorted(Q6dict.items(),key= operator.itemgetter(1),reverse=True))
  tmp = []
  for i in ans:
    tmp.append((i[1],i[0]))
  return tmp[:N]

def avgItemReview(item):
  try:
    return sum(reviewsPerItem[item])/len(reviewsPerItem[item])
  except:
    return 0

print(avgItemReview("1251032"))
print(reviewsPerItem.keys())
# for i in reviewsPerItem:
#   print(len(reviewsPerItem[i]),i)
print(reviewsPerItem['1251032'])

def ratingPred(user,item):
  if user not in usersPerItem:
    # print("no user")
    return globalAvg
  if item not in itemsPerUser:
    # print("no item")
    return globalAvg
  itemsInteracted = itemsPerUser[user]
  numi = 0
  deno = 0
  # print(len(reviewsPerUser[user]))
  # print(len(itemsPerUser[user]))
  for i in itemsInteracted:
    if i == item:
      continue
    else:
      numi += ((ratingDict[(user,i)]-avgItemReview(i))*Jaccard(set(usersPerItem[i]),set(usersPerItem[item])))
      deno += Jaccard(set(usersPerItem[i]),set(usersPerItem[item]))

  if numi == 0:
    # print("no user")
    return avgItemReview(item) + 0
  if deno == 0:
    return avgItemReview(item) + 0
  # print("1")
  return avgItemReview(item)+(numi/deno)

MSE = 0
n=0
for i in dataTest:
  if "rating" in i:
    y_pred = ratingPred(i["user_id"],i["book_id"])
    
    y_test = i["rating"]
    MSE += (y_test-y_pred)**2
    n+=1
    # print(y_pred)
    # break
    
# print(n)
print(MSE/len(dataTest))


answers["Q7"] = MSE/n

answers

"""# Q8)"""

def ratingPred(user,item):
  if user not in usersPerItem:
    # print("no user")
    return globalAvg
  if item not in itemsPerUser:
    # print("no item")
    return globalAvg
  usersInteracted = usersPerItem[item]
  numi = 0
  deno = 0
  # print(len(reviewsPerUser[user]))
  # print(len(itemsPerUser[user]))
  for i in usersInteracted:
    if i == user:
      continue
    else:
      numi += ((ratingDict[(i,item)]-avgItemReview(item))*Jaccard(set(itemsPerUser[i]),set(itemsPerUser[user])))
      deno += Jaccard(set(itemsPerUser[i]),set(itemsPerUser[user]))

  if numi == 0:
    # print("no user")
    return avgItemReview(item) + 0
  if deno == 0:
    return avgItemReview(item) + 0
  # print("1")
  return avgItemReview(item)+(numi/deno)

MSE = 0
n=0
for i in dataTest:
  if "rating" in i:
    y_pred = ratingPred(i["user_id"],i["book_id"])
    
    y_test = i["rating"]
    MSE += (y_test-y_pred)**2
    n+=1
    # print(y_pred)
    # break
    
# print(n)
print(MSE/len(dataTest))


answers["Q8"] = MSE/n

answers